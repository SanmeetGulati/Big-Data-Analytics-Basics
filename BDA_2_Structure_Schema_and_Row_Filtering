{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/SanmeetGulati/Big-Data-Analytics-Basics/blob/main/BDA_2_Structure_Schema_and_Row_Filtering\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6VvwnNZsl0Ot"
      },
      "source": [
        "Create PySpark Schema"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "Qa55Fs3mlmeD"
      },
      "outputs": [],
      "source": [
        "from pyspark.sql import SparkSession\n",
        "from pyspark.sql.types import StructType, StructField, StringType, IntegerType\n",
        "\n",
        "spark = SparkSession.builder.getOrCreate()\n",
        "students_data = [\n",
        "    (1,'Harsh','Pune','2000-05-12','M',83,101),\n",
        "    (2,'Isha','Mumbai','2002-09-20','F',92,101),\n",
        "    (3,'Ujjwal','Delhi','2001-03-14','M',75,102),\n",
        "    (4,'Divya','Nashik','2003-07-30','F',88,102),\n",
        "    (5,'Harry','Goa','2000-11-06','M',69,101),\n",
        "]\n",
        "students_schema = StructType([\n",
        "    StructField(\"rollno\", IntegerType(), True),\n",
        "    StructField(\"name\", StringType(), True),\n",
        "    StructField(\"address\", StringType(), True),\n",
        "    StructField(\"DoB\", StringType(), True),\n",
        "    StructField(\"gender\", StringType(), True),\n",
        "    StructField(\"percentage\", IntegerType(), True),\n",
        "    StructField(\"classid\", IntegerType(), True)\n",
        "])\n",
        "students_df = spark.createDataFrame(students_data, students_schema)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "QsQQsduAmJdZ"
      },
      "source": [
        "\n",
        "\n",
        "```\n",
        "# This is formatted as code\n",
        "```\n",
        "\n",
        "Display schema\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Wr3M2JH9lqAg",
        "outputId": "0f5f1d79-8e92-4265-cf1e-e2fe99b94b44"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "root\n",
            " |-- rollno: integer (nullable = true)\n",
            " |-- name: string (nullable = true)\n",
            " |-- address: string (nullable = true)\n",
            " |-- DoB: string (nullable = true)\n",
            " |-- gender: string (nullable = true)\n",
            " |-- percentage: integer (nullable = true)\n",
            " |-- classid: integer (nullable = true)\n",
            "\n"
          ]
        }
      ],
      "source": [
        "students_df.printSchema()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "DUsLUH6OmQ0J"
      },
      "source": [
        "Filtering Rows"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MA9Jhb3hmSN1",
        "outputId": "6d4cbcee-3cb7-414b-f8d3-19e2311bc1e4"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "+-------+------+-----+-------+----------+------+----------+------------+\n",
            "|classid|rollno| name|address|       DoB|gender|percentage|   classname|\n",
            "+-------+------+-----+-------+----------+------+----------+------------+\n",
            "|    101|     1|Harsh|   Pune|2000-05-12|     M|        83|Data Science|\n",
            "|    101|     2| Isha| Mumbai|2002-09-20|     F|        92|Data Science|\n",
            "|    101|     5|Harry|    Goa|2000-11-06|     M|        69|Data Science|\n",
            "+-------+------+-----+-------+----------+------+----------+------------+\n",
            "\n"
          ]
        }
      ],
      "source": [
        "classes_data = [\n",
        "    (101, 'Data Science'),\n",
        "    (102, 'AI'),\n",
        "    (103, 'ML'),\n",
        "    (104, 'Statistics'),\n",
        "    (105, 'Bioinfo'),\n",
        "]\n",
        "classes_schema = StructType([\n",
        "    StructField(\"classid\", IntegerType(), True),\n",
        "    StructField(\"classname\", StringType(), True),\n",
        "])\n",
        "classes_df = spark.createDataFrame(classes_data, classes_schema)\n",
        "\n",
        "# Join and filter\n",
        "from pyspark.sql.functions import col\n",
        "merged_df = students_df.join(classes_df, 'classid')\n",
        "merged_df.filter(col('classname') == 'Data Science').show()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9GyM-t_GmYv-"
      },
      "source": [
        "Add Age Column (calculating from doB)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "q_7pXQ9CmSoq",
        "outputId": "342aca17-ed1c-47f7-e3fe-fc5b54f22a07"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "+------+------+-------+----------+------+----------+-------+---+\n",
            "|rollno|  name|address|       DoB|gender|percentage|classid|age|\n",
            "+------+------+-------+----------+------+----------+-------+---+\n",
            "|     1| Harsh|   Pune|2000-05-12|     M|        83|    101| 25|\n",
            "|     2|  Isha| Mumbai|2002-09-20|     F|        92|    101| 23|\n",
            "|     3|Ujjwal|  Delhi|2001-03-14|     M|        75|    102| 24|\n",
            "|     4| Divya| Nashik|2003-07-30|     F|        88|    102| 22|\n",
            "|     5| Harry|    Goa|2000-11-06|     M|        69|    101| 25|\n",
            "+------+------+-------+----------+------+----------+-------+---+\n",
            "\n"
          ]
        }
      ],
      "source": [
        "from pyspark.sql.functions import year, current_date, to_date\n",
        "\n",
        "students_df = students_df.withColumn(\"DoB\", to_date(col(\"DoB\"), \"yyyy-MM-dd\"))\n",
        "students_df = students_df.withColumn(\"age\", year(current_date()) - year(col(\"DoB\")))\n",
        "students_df.show()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "MtO2xnT9meQf"
      },
      "source": [
        "Grading Percentage Function"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LJwowkkRmbm7",
        "outputId": "862fd917-cbc0-46bf-f06f-4d5997dccb87"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "+------+----------+-----+\n",
            "|  name|percentage|grade|\n",
            "+------+----------+-----+\n",
            "| Harsh|        83|    A|\n",
            "|  Isha|        92|    A|\n",
            "|Ujjwal|        75|    A|\n",
            "| Divya|        88|    A|\n",
            "| Harry|        69|    B|\n",
            "+------+----------+-----+\n",
            "\n"
          ]
        }
      ],
      "source": [
        "from pyspark.sql.functions import when\n",
        "\n",
        "students_df = students_df.withColumn(\n",
        "    \"grade\",\n",
        "    when(col(\"percentage\") >= 90, \"A\")\n",
        "    .when(col(\"percentage\") >= 75, \"A\")\n",
        "    .when(col(\"percentage\") >= 60, \"B\")\n",
        "    .when(col(\"percentage\") >= 50, \"C\")\n",
        "    .otherwise(\"F\")\n",
        ")\n",
        "students_df.select(\"name\", \"percentage\", \"grade\").show()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1KIao9w7mmcC"
      },
      "source": [
        "Group By Dept, Get Aggregates"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "g8q8sw15mhn_",
        "outputId": "35e80217-dd96-4ca9-924c-5845b9040e46"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "+------------+-----------------+\n",
            "|   classname|  avg(percentage)|\n",
            "+------------+-----------------+\n",
            "|          AI|             81.5|\n",
            "|Data Science|81.33333333333333|\n",
            "+------------+-----------------+\n",
            "\n"
          ]
        }
      ],
      "source": [
        "# Assuming dept_df and emp_df are created similar to above\n",
        "mean_salary_df = merged_df.groupBy(\"classname\").avg(\"percentage\")\n",
        "mean_salary_df.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1DSVWg6Kna6C"
      },
      "source": [
        "# Q.2"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "metadata": {
        "id": "z5cTYQY8mofg"
      },
      "outputs": [],
      "source": [
        "from pyspark.sql import SparkSession\n",
        "from pyspark.sql.types import StructType, StructField, StringType, IntegerType\n",
        "\n",
        "spark = SparkSession.builder.getOrCreate()\n",
        "\n",
        "emp_data = [\n",
        "    (101,'Isha','F','Analyst','Pune',25000,10),\n",
        "    (102,'Harry','M','Manager','Mumbai',32000,10),\n",
        "    (103,'Pooja','F','Analyst','Delhi',18000,11),\n",
        "    (104,'Bob','M','Lead','Goa',27000,11),\n",
        "    (105,'Divya','F','Manager','Nashik',21000,12),\n",
        "]\n",
        "emp_schema = StructType([\n",
        "    StructField(\"eno\", IntegerType(), True),\n",
        "    StructField(\"ename\", StringType(), True),\n",
        "    StructField(\"gender\", StringType(), True),\n",
        "    StructField(\"designation\", StringType(), True),\n",
        "    StructField(\"city\", StringType(), True),\n",
        "    StructField(\"salary\", IntegerType(), True),\n",
        "    StructField(\"dno\", IntegerType(), True)\n",
        "])\n",
        "emp_df = spark.createDataFrame(emp_data, emp_schema)\n",
        "\n",
        "dept_data = [\n",
        "    (10, 'IT', 'Pune'),\n",
        "    (11, 'HR', 'Mumbai'),\n",
        "    (12, 'Sales', 'Delhi'),\n",
        "    (13, 'Finance', 'Goa'),\n",
        "    (14, 'Support', 'Nashik'),\n",
        "]\n",
        "dept_schema = StructType([\n",
        "    StructField(\"dno\", IntegerType(), True),\n",
        "    StructField(\"dname\", StringType(), True),\n",
        "    StructField(\"location\", StringType(), True)\n",
        "])\n",
        "dept_df = spark.createDataFrame(dept_data, dept_schema)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3IcBaoiGnjT2"
      },
      "source": [
        "Display Schema"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-P3rDqEEnfBn",
        "outputId": "6d1c3b25-3c8f-4f92-cb09-a131b05f2fbf"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "root\n",
            " |-- eno: integer (nullable = true)\n",
            " |-- ename: string (nullable = true)\n",
            " |-- gender: string (nullable = true)\n",
            " |-- designation: string (nullable = true)\n",
            " |-- city: string (nullable = true)\n",
            " |-- salary: integer (nullable = true)\n",
            " |-- dno: integer (nullable = true)\n",
            "\n",
            "root\n",
            " |-- dno: integer (nullable = true)\n",
            " |-- dname: string (nullable = true)\n",
            " |-- location: string (nullable = true)\n",
            "\n"
          ]
        }
      ],
      "source": [
        "emp_df.printSchema()\n",
        "dept_df.printSchema()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "rSOIU-kbnrog"
      },
      "source": [
        "Employees with salary > 20000"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 9,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kSobQzQDnkvC",
        "outputId": "46ce7955-c9d5-4c00-85e9-2dc6330e3b22"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "+---+-----+------+-----------+------+------+---+\n",
            "|eno|ename|gender|designation|  city|salary|dno|\n",
            "+---+-----+------+-----------+------+------+---+\n",
            "|101| Isha|     F|    Analyst|  Pune| 25000| 10|\n",
            "|102|Harry|     M|    Manager|Mumbai| 32000| 10|\n",
            "|104|  Bob|     M|       Lead|   Goa| 27000| 11|\n",
            "|105|Divya|     F|    Manager|Nashik| 21000| 12|\n",
            "+---+-----+------+-----------+------+------+---+\n",
            "\n"
          ]
        }
      ],
      "source": [
        "emp_df.filter(emp_df.salary > 20000).show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "zphBtrSpnybc"
      },
      "source": [
        "All Female Employees, Joined with Departments"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 10,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Z9gCQFDnnvGS",
        "outputId": "9a665734-a75b-4848-aad7-5c8781d1b401"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "+-----+-----+\n",
            "|ename|dname|\n",
            "+-----+-----+\n",
            "| Isha|   IT|\n",
            "|Pooja|   HR|\n",
            "|Divya|Sales|\n",
            "+-----+-----+\n",
            "\n"
          ]
        }
      ],
      "source": [
        "from pyspark.sql.functions import col\n",
        "female_emp_df = emp_df.filter(col(\"gender\") == \"F\")\n",
        "joined_df = female_emp_df.join(dept_df, \"dno\")\n",
        "joined_df.select(\"ename\", \"dname\").show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3Nv5DThan7IR"
      },
      "source": [
        "Group by Department and Aggregations (e.g., avg salary)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 11,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "o4nashyToKJR",
        "outputId": "69e383bc-280e-406a-ff4a-648738f4959f"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "+-----+-----------+\n",
            "|dname|avg(salary)|\n",
            "+-----+-----------+\n",
            "|Sales|    21000.0|\n",
            "|   HR|    22500.0|\n",
            "|   IT|    28500.0|\n",
            "+-----+-----------+\n",
            "\n"
          ]
        }
      ],
      "source": [
        "merged_df = emp_df.join(dept_df, \"dno\")\n",
        "merged_df.groupBy(\"dname\").avg(\"salary\").show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "hnRU1b-Nn68z"
      },
      "source": [
        "\n",
        "Count of Male Employees in IT Department\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 13,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HIoEwnR1oTNe",
        "outputId": "dd47089d-7059-45e1-d8cb-80f1835a78fd"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Male count in IT: 1\n"
          ]
        }
      ],
      "source": [
        "male_count = merged_df.filter(\n",
        "    (col(\"gender\") == \"M\") & (col(\"dname\") == \"IT\")\n",
        ").count()\n",
        "print(\"Male count in IT:\", male_count)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "aRSfftumn6xb"
      },
      "source": [
        "Salary Category Assignment"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 14,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oLD3lJ38n2kp",
        "outputId": "aebb5453-2bee-4a36-9930-2efa49ab3552"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "+-----+------+------------+\n",
            "|ename|salary|salary_group|\n",
            "+-----+------+------------+\n",
            "| Isha| 25000|        High|\n",
            "|Harry| 32000|        High|\n",
            "|Pooja| 18000|         Low|\n",
            "|  Bob| 27000|        High|\n",
            "|Divya| 21000|      Medium|\n",
            "+-----+------+------------+\n",
            "\n"
          ]
        }
      ],
      "source": [
        "from pyspark.sql.functions import when\n",
        "\n",
        "emp_df = emp_df.withColumn(\n",
        "    \"salary_group\",\n",
        "    when(col(\"salary\") < 20000, \"Low\")\n",
        "    .when(col(\"salary\") < 25000, \"Medium\")\n",
        "    .otherwise(\"High\")\n",
        ")\n",
        "emp_df.select(\"ename\", \"salary\", \"salary_group\").show()"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "gpuType": "T4",
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU"
  },
  "nbformat": 4,
  "nbformat_minor": 0
}